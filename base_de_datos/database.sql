


BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE visualizaciones';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE peliculas';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE tematicas';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE directores';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE usuarios';
EXCEPTION WHEN OTHERS THEN NULL;
END;
/

-- Tabla usuarios
CREATE TABLE usuarios (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    estado  NUMBER(1) DEFAULT 1 NOT NULL, -- Simula BOOLEAN (0/1)
    alta    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    email   VARCHAR2(100) NOT NULL,
    nombre  VARCHAR2(100) NOT NULL,
    CONSTRAINT usuarios_email_uq UNIQUE (email),
    CONSTRAINT usuarios_email_chk CHECK (REGEXP_LIKE(email, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'))
);

-- Tabla directores
CREATE TABLE directores (
    id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT directores_nombre_uq UNIQUE (nombre)
);

-- Tabla tematicas
CREATE TABLE tematicas (
    id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    CONSTRAINT tematicas_nombre_uq UNIQUE (nombre)
);

-- Tabla peliculas
CREATE TABLE peliculas (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tematica      NUMBER NOT NULL,
    director      NUMBER NOT NULL,
    duracion      NUMBER NOT NULL,
    fecha         DATE NOT NULL,
    edad_minima   NUMBER NOT NULL,
    nombre        VARCHAR2(100) NOT NULL,
    CONSTRAINT peliculas_edad_minima_chk CHECK (edad_minima >= 0),
    CONSTRAINT peliculas_duracion_chk CHECK (duracion > 0),
    CONSTRAINT peliculas_tematica_fk FOREIGN KEY (tematica) REFERENCES tematicas(id),
    CONSTRAINT peliculas_director_fk FOREIGN KEY (director) REFERENCES directores(id)
);

CREATE OR REPLACE TRIGGER trg_check_fecha_pelicula
BEFORE INSERT OR UPDATE ON peliculas
FOR EACH ROW
BEGIN
    IF :NEW.fecha > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'La fecha de la película no puede ser futura.');
    END IF;
END;
/


-- Índices
--CREATE INDEX peliculas_tematica_idx ON peliculas (tematica);
--CREATE INDEX peliculas_director_idx ON peliculas (director);
--CREATE INDEX peliculas_fecha_idx ON peliculas (fecha);

-- Tabla visualizaciones particionada por rango
CREATE TABLE visualizaciones (
    usuario  NUMBER NOT NULL,
    pelicula NUMBER NOT NULL,
    fecha    TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT visualizaciones_pk PRIMARY KEY (fecha, usuario, pelicula),
    CONSTRAINT visualizaciones_usuario_fk FOREIGN KEY (usuario) REFERENCES usuarios(id),
    CONSTRAINT visualizaciones_pelicula_fk FOREIGN KEY (pelicula) REFERENCES peliculas(id)
)
PARTITION BY RANGE (fecha) (
    PARTITION visualizaciones_2024 VALUES LESS THAN (TO_DATE('2025-01-01','YYYY-MM-DD')),
    PARTITION visualizaciones_2025 VALUES LESS THAN (TO_DATE('2026-01-01','YYYY-MM-DD'))
);

-- Índice adicional si necesitas buscar por usuario
--CREATE INDEX visualizaciones_usuario_idx ON visualizaciones(usuario);


SELECT COUNT(*) FROM USUARIOS;
SELECT COUNT(*) FROM DIRECTORES;
SELECT COUNT(*) FROM TEMATICAS;
SELECT COUNT(*) FROM PELICULAS;
SELECT COUNT(*) FROM VISUALIZACIONES;
